---
export interface Props {
  mobile?: boolean;
}

const { mobile = false } = Astro.props;
---

<div class={mobile ? "bg-gray-50 rounded-lg p-6 border border-gray-200" : "bg-white/80 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-gray-100"}>
  <h3 class="text-lg font-semibold mb-6 text-charcoal flex items-center">
    <svg class="w-5 h-5 mr-2 text-coral-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
    {mobile ? "Jump to Section" : "Table of Contents"}
  </h3>
  <nav class="toc-nav">
    <ul class={mobile ? "space-y-2" : "space-y-1"}>
      <!-- Will be populated by client-side JavaScript -->
    </ul>
  </nav>
</div>

<script>
  // Function to generate table of contents
  function generateTOC() {
    const tocNav = document.querySelector('.toc-nav ul');
    if (!tocNav) return;

    const headings = document.querySelectorAll('article h2, article h3');
    const tocItems = [];

    headings.forEach((heading, index) => {
      // Create ID if heading doesn't have one
      if (!heading.id) {
        const id = heading.textContent
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');
        heading.id = id;
      }

      const level = heading.tagName.toLowerCase();
      const li = document.createElement('li');
      li.className = level === 'h3' ? 'ml-4' : '';
      
      const a = document.createElement('a');
      a.href = `#${heading.id}`;
      a.textContent = heading.textContent;
      a.className = level === 'h3' 
        ? 'text-gray-500 hover:text-coral-500 transition-all duration-200 block py-2 pl-4 text-sm border-l-2 border-transparent hover:border-coral-500 hover:bg-coral-50/50'
        : 'text-gray-700 hover:text-coral-500 transition-all duration-200 block py-2 font-medium border-l-2 border-transparent hover:border-coral-500 hover:bg-coral-50/50';
      
      li.appendChild(a);
      tocItems.push(li);
    });

    // Clear existing items and add new ones
    tocNav.innerHTML = '';
    tocItems.forEach(item => tocNav.appendChild(item));

    // Smooth scroll behavior
    document.querySelectorAll('.toc-nav a').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          const offset = 100; // Offset for fixed header
          const targetPosition = targetElement.offsetTop - offset;
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      });
    });

    // Highlight current section on scroll
    const observerOptions = {
      rootMargin: '-100px 0px -70% 0px',
      threshold: 0
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const id = entry.target.id;
        const tocLink = document.querySelector(`.toc-nav a[href="#${id}"]`);
        
        if (entry.isIntersecting) {
          // Remove active class from all links
          document.querySelectorAll('.toc-nav a').forEach(link => {
            link.classList.remove('text-coral-500', 'bg-coral-50', 'border-coral-500');
            link.classList.add('border-transparent');
          });
          // Add active class to current link
          if (tocLink) {
            tocLink.classList.remove('border-transparent');
            tocLink.classList.add('text-coral-500', 'bg-coral-50', 'border-coral-500');
          }
        }
      });
    }, observerOptions);

    // Observe all headings
    headings.forEach(heading => observer.observe(heading));
  }

  // Generate TOC when DOM is loaded
  document.addEventListener('DOMContentLoaded', generateTOC);
</script>